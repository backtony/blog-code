
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    charset utf-8;

    # nginx에서 정적 파일을 보내도록 설정할 수 있는 옵션
    sendfile        on;
    #tcp_nopush     on;

    client_body_buffer_size     16k;     # POST등의 요청에 포함되는 body에 대한 버퍼 크기 (default : 16k for x86-64)
    client_header_buffer_size   8k;      # 요청 헤더에 대한 버퍼 크기 (default : 1k)
    # client_header_buffer_size로 정한 기본 버퍼가 부족할 경우 클라이언트 요청을 저장하는 데 사용될 대용량 버퍼의 개수와 크기를 정한다.
    large_client_header_buffers 4 8k;    # 긴 URL 요청으로 들어올 수 있는 헤더의 최대크기. 이를 초과할경우 414 응답
    client_max_body_size        1m;      # 리퀘스트 body사이즈에 대한 최대 크기 (default : 1m)
    client_header_timeout       5s;      # 클라이언트 요청 후 응답의 헤더 보내기까지 기다리는 시간
    client_body_timeout         5s;      # 클라이언트 요청 후 응답의 바디 보내기까지 기다리는 시간
    send_timeout                240s;    # 성공한 요청 사이 대기 시간
    resolver_timeout            5s;      # domain to ip 허용 최대시간

    # HTTP 요청 헤더를 파싱할 때 사용하는 해시 테이블의 버킷(bucket) 크기를 설정하는 옵션
    # HTTP 요청 헤더는 키-값 쌍으로 이루어진 매우 큰 데이터이기 때문에, nginx는 이를 빠르게 처리하기 위해 해시 테이블을 사용
    # 이 해시 테이블의 버킷 크기를 지정하여 해시 충돌을 최소화하고 처리 속도를 향상
    # 기본값은 64 -> 프록시 서버(nginx)가 처리하는 http 요청 헤더수가 많다면 버킷 크기를 크게 설정하는 것이 좋다.
    proxy_headers_hash_bucket_size 128;

    # 응답의 본문을 압축
    gzip on;
    gzip_comp_level 6; # 1(압축 낮고 빠름) ~ 9(압축 높고 느림) // 기본 6
    gzip_min_length 1000; # 본문 길이가 지정 값보다 작으면 압축하지 않음
    # 실제 서버로 부터 받은 응답 본문을 압축할지 말지 여부를 결정한다.
    # 아래 설정은 expires헤더가 캐싱을 하지 않게 되어있다면 압축을 활성화
    # cache-control 헤더가 no-cache, no-store, private 으로 설정되어있으면 압축 활성화
    # authorization 헤더가 있으면 압축을 활성
    gzip_proxied    expired no-cache no-store private auth;
    # 기본 MIME 타입 외에 추가로 압축을 활성화할 타입
    gzip_types      text/plain application/json application/javascript application/x-javascript text/xml text/css application/xml;


    # nginx에서 server_tokens 옵션은 HTTP 응답 헤더에 서버 소프트웨어의 정보를 표시할 지 여부를 설정하는 옵션입니다.
    # 기본적으로 nginx는 HTTP 응답 헤더에 서버 소프트웨어의 이름과 버전 정보를 표시합니다.
    # 이 정보는 서버 보안에 취약점을 제공할 수 있기 때문에, 서버 보안을 강화하기 위해 server_tokens 옵션을 사용하여 해당 정보를 감추는 것이 좋다.
    server_tokens    off;
    # 파일 시스템에서 사용하는 심볼릭 링크 -> 바로가기를 따라가지 않도록 하는 설정
    # 보안상의 이유로 심볼릭 링크를 따라가는 것이 위험한 경우에 사용
    disable_symlinks on;

    # 일반적으로 keepalive_timeout 값은 60초에서 120초 사이로 설정.
    # 이 값은 너무 짧으면 매번 새로운 커넥션을 맺어야 하므로 부하가 많은 서버의 경우 성능 저하를 유발할 수 있고, 너무 길면 대규모 트래픽에서 커넥션 리소스를 과도하게 점유할 수 있음.
    # keepalive_timeout  75; # default 75s

    upstream cors_service {
        server localhost:8080;
        keepalive 100;
    }

    # cors에서 허용할 url들 명시해서 매칭되면 origin_allowed를 1로 세팅
    map $http_origin $origin_allowed {
        default 0;
        http://localhost:3000 1;
    }

    # origin_allowed가 1이면 allow_origin에 현재 요청으로 들어온 host 세
    map $origin_allowed $allow_origin {
        default "";
        1 $http_origin;
    }

    server {
        # localhost:80 포트로 오는 요청을 처리한다.
        # default_server이므로 80포트로 들어왔는데 매칭되는 server 블록이 없다면 여기로 다 들어온다.
        listen       80 default_server;

        # for console!
        access_log /dev/stdout main;
        error_log /dev/stderr info;
        # access_log  logs/host.access.log  main;
        # error_log  /usr/local/nginx-error.log info;

        # nginx에서 정의된 사용자 정의 응답 코드(444)
        # 클라이언트의 요청을 무시하고 응답을 보내지 않는다.
        location / {
            return 444;
        }

        location /http_stub_status {
            allow 127.0.0.1/32;
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            allow ::1/128;
            # http_stub_status 모듈은 서버의 상태 정보를 확인할 수 있는 스텟(Stat) 모듈
            # nginx 웹 서버의 상태 정보를 HTTP 요청을 통해 확인 가능
            stub_status;
            deny all;
        }
    }

    server {
        listen 80;
        # nginx서버가 여러 도메인이름을 가지고 있을 수 있다. localhost 서버이름으로 들어오는 경우 이 server블록이 처리한다.
        server_name localhost;

        # for console!
        access_log /dev/stdout main;
        error_log /dev/stderr info;

        # underscores_in_headers는 nginx의 설정 옵션 중 하나입니다. 이 옵션은 HTTP 요청 헤더에 밑줄 문자(_)를 포함시키는 것을 허용하는지 여부를 결정.
        # HTTP/1.1 명세에 따르면, 요청 헤더의 이름은 하이픈(-)으로 구분된 단어의 집합. 그러나 일부 웹 프레임워크에서는 밑줄 문자를 사용하여 헤더 이름을 구성하는 경우가 존재.
        # underscores_in_headers 옵션은 이러한 웹 프레임워크와 호환성을 유지하기 위해 도입
        underscores_in_headers on;

        location / {
            include common/cors-header.conf;
            include common/cors-options-response.conf;
            include common/proxy.conf;

            proxy_pass http://cors_service;
        }

        include common/locations.conf;
    }

}
